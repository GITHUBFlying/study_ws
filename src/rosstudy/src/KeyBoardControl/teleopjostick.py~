#!/usr/bin/env python
# -*- coding: utf-8 -*-
import roslib; roslib.load_manifest('agv') 
import rospy
from geometry_msgs.msg import Twist 
from std_msgs.msg import String
from sensor_msgs.msg import Joy
import sys
import time
SPEED=0.4
cmd = Twist()
pub = rospy.Publisher('cmd_vel',Twist,queue_size=1)
global CurrentSpeedX
global CurrentSpeedY
global CurrentRotate
global TIME
global ACC
TIME=0.1
ACC=0.1

CurrentSpeedX=0.0
CurrentSpeedY=0.0
CurrentRotate=0.0
def moveForward(speed):
	global CurrentSpeedX
	global TIME
	global ACC
	CurrentSpeedX=speed#表示当前的速度
	num=abs(int(speed/ACC))
	cmd.linear.x=0.0
	if speed>0:
		for i in range(num):
			cmd.linear.x+=ACC
			cmd.linear.y=0.0
			cmd.angular.z=0.0
			pub.publish(cmd)
			time.sleep(TIME)
		
	elif speed<0:
		for i in range(num):
			cmd.linear.x-=ACC
			cmd.linear.y=0.0
			cmd.angular.z=0.0
			pub.publish(cmd)
			time.sleep(TIME)
		
	else:
		return
def moveLeft(speed):
	global CurrentSpeedY
	global TIME
	global ACC
	CurrentSpeedY=speed#表示当前的速度
	num=abs(int(speed/ACC))
	cmd.linear.x=0.0
	if speed>0:
		for i in range(num):
			cmd.linear.y+=ACC
			cmd.linear.x=0.0
			cmd.angular.z=0.0
			pub.publish(cmd)
			time.sleep(TIME)
		
	elif speed<0:
		for i in range(num):
			cmd.linear.y-=ACC
			cmd.linear.x=0.0
			cmd.angular.z=0.0
			pub.publish(cmd)
			time.sleep(TIME)
		
	else:
		return

def stop_robot():
	global CurrentSpeedX
	global CurrentSpeedY
	global TIME
	global ACC
	speed=0.0
	if abs(CurrentSpeedX)>abs(CurrentSpeedY):
		speed=abs(CurrentSpeedX)
	else:
		speed=abs(CurrentSpeedY)
	if speed==0.0:
		return
	#print speed
	num=int(speed/ACC)
	#print num
	cmd.linear.x=CurrentSpeedX
	cmd.linear.y=CurrentSpeedY
	print (CurrentSpeedX/num)
	for i in range(num-1):
		cmd.linear.x-=(CurrentSpeedX/num)
		cmd.linear.y-=(CurrentSpeedY/num)
		cmd.angular.z=0.0
		pub.publish(cmd)
		time.sleep(TIME)
	cmd.linear.x=0.0
	cmd.linear.y=0.0
	cmd.angular.z=0.0
	pub.publish(cmd)
	
	CurrentSpeedX=0.0
	CurrentSpeedY=0.0

def rotateRobot(speed):
	global CurrentRotate
	global TIME
	CurrentRotate=speed#表示当前的速度
	num=abs(int(speed/0.1))
	cmd.linear.x=0.0
	cmd.linear.y=0.0
	cmd.linear.z=0.0
	if speed>0:
		for i in range(num):
			cmd.linear.y=0.0
			cmd.linear.x=0.0
			cmd.angular.z+=0.2
			pub.publish(cmd)
			time.sleep(TIME)
		
	elif speed<0:
		for i in range(num):
			cmd.linear.y=0.0
			cmd.linear.x=0.0
			cmd.angular.z-=0.2
			pub.publish(cmd)
			time.sleep(TIME)
		
	else:
		return
def stoprotate():
	global CurrentRotate
	global TIME
	print CurrentRotate
	if CurrentRotate==0.0:
		return
	if  CurrentRotate>0.0:
		speed=CurrentRotate#表示当前的速度
		num=abs(int(speed/0.1))
		cmd.linear.x=0.0
		cmd.linear.y=0.0
		cmd.linear.z=0.0
		for i in range(num-1):
			cmd.linear.y=0.0
			cmd.linear.x=0.0
			cmd.angular.z-=0.1
			pub.publish(cmd)
			time.sleep(TIME)
		cmd.linear.x=0.0
		cmd.linear.y=0.0
		cmd.angular.z=0.0
		pub.publish(cmd)
	elif CurrentRotate<0.0:
		speed=CurrentRotate#表示当前的速度
		num=abs(int(speed/0.1))
		cmd.linear.x=0.0
		cmd.linear.y=0.0
		cmd.linear.z=0.0
		for i in range(num-1):
			cmd.linear.y=0.0
			cmd.linear.x=0.0
			cmd.angular.z+=0.1
			pub.publish(cmd)
			time.sleep(TIME)
		cmd.linear.x=0.0
		cmd.linear.y=0.0
		cmd.angular.z=0.0
		pub.publish(cmd)
	CurrentRotate=0.0
def callback(msg):
	global SPEED
	if msg.buttons[0]==1:
		print 'rUp'
		SPEED+=0.1
		if SPEED>=0.6:
			SPEED=0.6
		print ("speed up now is %f"%SPEED)
	elif msg.buttons[1]==1:
		print 'rRight'
		rotateRobot(0-0.6)
		print "turn right!"
	elif msg.buttons[2]==1:
		print 'rDown'
		SPEED-=0.1
		if  SPEED<=0.2 :
			SPEED=0.2
		print ("speed down now is %f"%SPEED)
	elif msg.buttons[3]==1:
		print 'rLeft'
		rotateRobot(0.6)
		print "turn left!"
	elif msg.buttons[7]==1:
		print 'R1'
		stop_robot()
		stoprotate()
		print "move stop!"
	elif msg.buttons[5]==1:
		print 'R2'
		cmd.linear.x=0.0
		cmd.linear.y=0.0
		cmd.angular.z=0.0
		pub.publish(cmd)
	elif msg.buttons[4]==1:
		print 'L2'
		cmd.linear.x=0.0
		cmd.linear.y=0.0
		cmd.angular.z=0.0
		pub.publish(cmd)
	elif msg.buttons[6]==1:
		print 'L1'
		stop_robot()
		stoprotate()
		print "move stop!"
	elif msg.axes[0]==1.0:
		print 'lLeft'
		moveLeft(SPEED)
		print "move left!"
	elif msg.axes[1]==1.0:
		print 'lUp'
		moveForward(SPEED)
		print "move forward!"
	elif msg.axes[0]==-1.0:
		print 'lRight'
		moveLeft(0-SPEED)
		print "move right!"
	elif msg.axes[1]==-1.0:
		print 'lDown'
		moveForward(0-SPEED)
		print "move back!"
	
if __name__ == '__main__':
	rospy.init_node('teleopjoy')
	rospy.Subscriber("/joy",Joy,callback)
	rospy.spin()
		
			
			
